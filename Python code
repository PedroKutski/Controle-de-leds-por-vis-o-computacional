import cv2
import mediapipe as mp
import serial
import time
import numpy as np

# Configuração da porta serial (ajuste para a porta do seu Arduino)
porta_serial = "COM11"  # Para Windows (use "COMx" adequado)
# porta_serial = "/dev/ttyUSB0"  # Para Linux
arduino = serial.Serial(porta_serial, 9600)
time.sleep(2)  # Aguarde a inicialização do Arduino

# Inicializa MediaPipe
mp_hands = mp.solutions.hands
mp_draw = mp.solutions.drawing_utils
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=1, min_detection_confidence=0.5)

# Inicializa a captura de vídeo
cap = cv2.VideoCapture(0)

def contar_dedos(hand_landmarks):
    dedos_levantados = 0
    dedos_tips = [4, 8, 12, 16, 20]  # Pontas dos dedos

    # Verifica o polegar separadamente (usa a posição X)
    if hand_landmarks.landmark[4].x < hand_landmarks.landmark[3].x:
        dedos_levantados += 1

    # Verifica os outros dedos (usa a posição Y)
    for i in range(1, 5):
        if hand_landmarks.landmark[dedos_tips[i]].y < hand_landmarks.landmark[dedos_tips[i] - 2].y:
            dedos_levantados += 1

    return dedos_levantados

while True:
    success, frame = cap.read()
    if not success:
        break

    frame = cv2.flip(frame, 1)  # Espelha a imagem para efeito de espelho
    frame = cv2.resize(frame, (640, 480))  # Redimensiona o quadro para 640x480

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb_frame)

    dedos_detectados = 0
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            dedos_detectados = contar_dedos(hand_landmarks)
            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

    # Envia para o Arduino
    arduino.write(f"{dedos_detectados}\n".encode())

    # Exibe o resultado
    cv2.putText(frame, f"Dedos: {dedos_detectados}", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow("Detector de Dedos", frame)

    # Se pressionar ESC, sai do loop
    key = cv2.waitKey(1) & 0xFF
    if key == 27:  
        break

# Finaliza tudo
cap.release()
cv2.destroyAllWindows()
arduino.close()
